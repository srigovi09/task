import tkinter as tk
from tkinter import messagebox

class Contact:
    def __init__(self, name, phone_number, email, address):
        self.name = name
        self.phone_number = phone_number
        self.email = email
        self.address = address

class ContactManagerApp:
    def __init__(self, root):
        self.contacts = []
        self.root = root
        self.root.title("Contact Manager")

        self.frame = tk.Frame(root)
        self.frame.pack()

        tk.Label(self.frame, text="Name:").grid(row=0, column=0)
        tk.Label(self.frame, text="Phone Number:").grid(row=1, column=0)
        tk.Label(self.frame, text="Email:").grid(row=2, column=0)
        tk.Label(self.frame, text="Address:").grid(row=3, column=0)

        self.name_entry = tk.Entry(self.frame)
        self.name_entry.grid(row=0, column=1)
        self.phone_entry = tk.Entry(self.frame)
        self.phone_entry.grid(row=1, column=1)
        self.email_entry = tk.Entry(self.frame)
        self.email_entry.grid(row=2, column=1)
        self.address_entry = tk.Entry(self.frame)
        self.address_entry.grid(row=3, column=1)

        self.add_button = tk.Button(self.frame, text="Add Contact", command=self.add_contact)
        self.add_button.grid(row=4, columnspan=2)

        self.listbox = tk.Listbox(self.frame, width=40, height=10)
        self.listbox.grid(row=5, columnspan=2)

        self.search_entry = tk.Entry(self.frame)
        self.search_entry.grid(row=6, column=0)
        self.search_button = tk.Button(self.frame, text="Search", command=self.search_contact)
        self.search_button.grid(row=6, column=1)

        self.view_button = tk.Button(self.frame, text="View Contacts", command=self.view_contacts)
        self.view_button.grid(row=7, columnspan=2)

        self.delete_button = tk.Button(self.frame, text="Delete Contact", command=self.delete_contact)
        self.delete_button.grid(row=8, columnspan=2)

    def add_contact(self):
        name = self.name_entry.get()
        phone_number = self.phone_entry.get()
        email = self.email_entry.get()
        address = self.address_entry.get()

        if name and phone_number:
            contact = Contact(name, phone_number, email, address)
            self.contacts.append(contact)
            self.listbox.insert(tk.END, f"{contact.name} - {contact.phone_number}")
            self.clear_entries()
            messagebox.showinfo("Success", "Contact added successfully.")
        else:
            messagebox.showwarning("Warning", "Name and phone number are required.")

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)
        self.address_entry.delete(0, tk.END)

    def view_contacts(self):
        self.listbox.delete(0, tk.END)
        for contact in self.contacts:
            self.listbox.insert(tk.END, f"{contact.name} - {contact.phone_number}")

    def search_contact(self):
        query = self.search_entry.get()
        if query:
            results = [contact for contact in self.contacts if query.lower() in contact.name.lower() or query in contact.phone_number]
            self.listbox.delete(0, tk.END)
            for result in results:
                self.listbox.insert(tk.END, f"{result.name} - {result.phone_number}")
        else:
            messagebox.showwarning("Warning", "Please enter a search query.")

    def delete_contact(self):
        try:
            index = self.listbox.curselection()[0]
            contact = self.contacts.pop(index)
            self.listbox.delete(index)
            messagebox.showinfo("Success", f"Contact {contact.name} deleted.")
        except IndexError:
            messagebox.showwarning("Warning", "Please select a contact to delete.")

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactManagerApp(root)
    root.mainloop()
